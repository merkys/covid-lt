#!/bin/bash

PDB_IDS=
CONTACTS_WITH=
FILTER=.

PDB_INPUT_DIR=./
OUTPUT_DIR=./

while [ $# -gt 0 ]
do
    case $1 in
        --filter)
            FILTER=$2
            shift
            ;;
        --contacts-with)
            CONTACTS_WITH=$2
            shift
            ;;
        --pdb-input-dir)
            PDB_INPUT_DIR=$2
            shift
            ;;
        --output-dir)
            OUTPUT_DIR=$2
            shift
            ;;
        -*)
            echo "`basename $0`:: ERROR, unknown option '$1'." >&2
            exit 1
            ;;
        *)
            PDB_IDS="${PDB_IDS} $1"
            ;;
    esac
    shift
done

if [ -z "${CONTACTS_WITH}" ]
then
    echo "`basename $0`:: need hmmsearch results to identify the contacting chains, should be given with '--contacts-with' CLI option" >&2
    exit 1
fi

TMP_DIR=$(mktemp --directory)

for PDB_ID in ${PDB_IDS}
do
    # Select all S1 chains
    S1_CHAINS="$(bin/pdb_compounds ${PDB_INPUT_DIR}/${PDB_ID}.pdb --blastp alignments/pdb_seqres-P0DTC2.blastp | grep P0DTC2 | cut -f 2 | xargs | sed 's/ //g')"

    # Next if no S1 chains found
    test -z "${S1_CHAINS}" && continue

    # Selecting antibody chains
    ANTIBODY_CHAINS="$(bin/pdb_compounds ${PDB_INPUT_DIR}/${PDB_ID}.pdb --hmmsearch "${CONTACTS_WITH}" | grep -F "${CONTACTS_WITH}" | cut -f 2 | xargs | sed 's/ //g')"

    # Next if no antibody chains found
    test -z "${ANTIBODY_CHAINS}" && continue

    # Taking S1 chain which has the most contacts with the antibody chains
    S1_CHAIN=$(cat ${OUTPUT_DIR}pdb/P0DTC2/propka/${PDB_ID}.tab ${OUTPUT_DIR}pdb/P0DTC2/vorocontacts/${PDB_ID}.tab \
        | awk "(\$1 ~ /[${S1_CHAINS}]/ && \$6 ~ /[${ANTIBODY_CHAINS}]/) || (\$1 ~ /[${ANTIBODY_CHAINS}]/ && \$6 ~ /[${S1_CHAINS}]/)" \
        | awk "{ if( \$1 ~ /[${S1_CHAINS}]/ ) { print \$1 } else { print \$6 } }" \
        | sort \
        | uniq -c \
        | sort -nrk1.1 \
        | head -n1 \
        | awk '{print $2}')

    # Next if no S1 chains found
    test -z "${S1_CHAIN}" && continue

    cat ${OUTPUT_DIR}pdb/P0DTC2/propka/${PDB_ID}.tab ${OUTPUT_DIR}pdb/P0DTC2/vorocontacts/${PDB_ID}.tab \
        | bin/select-contacts --chain ${S1_CHAIN} --exclude-self --merge dist-min \
        | grep "${FILTER}" \
        | while read C1 R1 C2 R2 DIST
          do
            # Ignore non-antibody chains
            echo ${C1} ${C2} | grep --silent "[${ANTIBODY_CHAINS}]" || continue

            # S1 chain may be either on first or on second column
            if [ "${C1}" = "${S1_CHAIN}" ]
            then
                echo -e "${R1}\t${DIST}"
            else
                echo -e "${R2}\t${DIST}"
            fi
          done \
        | sort -nk1.1 \
        | python3 -c '
import re, sys
residues = {}
for line in sys.stdin:
    match = re.match("(\d+)\t(\S+)", line)
    if not match:
        continue
    residue = int(match.group(1))
    dist = float(match.group(2))
    if residue not in residues or dist < residues[residue]:
        residues[residue] = dist
for i in range(1, 1500): # Assuming S1 is max. 1500 aminoacids long
    if i in residues:
        print(residues[i])
    else:
        print("?")
          ' > "${TMP_DIR}/column.tab"

    if grep --silent . "${TMP_DIR}/column.tab"
    then
        echo $PDB_ID | cat - "${TMP_DIR}/column.tab" | sponge "${TMP_DIR}/column.tab"
        if test -e "${TMP_DIR}/output.tab"
        then
            paste "${TMP_DIR}/output.tab" "${TMP_DIR}/column.tab" | sponge "${TMP_DIR}/output.tab"
        else
            mv "${TMP_DIR}/column.tab" "${TMP_DIR}/output.tab"
        fi
    fi

done

test -e "${TMP_DIR}/output.tab" && cat "${TMP_DIR}/output.tab"
rm -rf "${TMP_DIR}"
