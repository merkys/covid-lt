#!/usr/bin/env python3

# Align peptide sequences in ATOM records to the sequences in SEQRES records.
# Sometimes they may be off and need to be adjusted in case the further processing software is unable to do that.
# For example, Jackal does the alignment (plain renumbering starting from 1?) on its own, but does not renumber LINK and SSBOND records.
# In particular:
# - PDB 7AKJ record, chain C. Processing it with Jackal leaves SSBOND pointing to a missing residue.
# - PDB 6NB4 record, interaction between 104:A and 1:D. Jackal looses LINK record which is important.

from Bio import AlignIO, PDB, SeqIO, pairwise2
from tempfile import NamedTemporaryFile
import re, sys, warnings

warnings.filterwarnings('ignore', category=PDB.PDBExceptions.PDBConstructionWarning)

files = sys.argv[1:]
if len(files) == 0:
    files = [sys.stdin]

file = files[0] # for now

# A trick to make the script read from STDIN
if not isinstance(file, str):
    tempfile = NamedTemporaryFile(mode='w')
    tempfile.write(file.read())
    tempfile.seek(0)
    file = tempfile.name

atom_seqs = [seq for seq in SeqIO.parse(file, 'pdb-atom')]
seqres_seqs = [seq for seq in SeqIO.parse(file, 'pdb-seqres')]

# TODO: Check if there is the same number of chains

parser = PDB.PDBParser()
model = parser.get_structure(atom_seqs[0].id[0:5], file)[0] # There may be more models?

first_id_of_chain = {}
for chain in model:
    residues = [res for res in chain]
    first_id_of_chain[chain.id] = residues[0].id[1]

atom_seqs_by_chain = {}
for seq in atom_seqs:
    atom_seqs_by_chain[seq.id[5]] = seq
seqres_seqs_by_chain = {}
for seq in seqres_seqs:
    chain = seq.id
    if len(chain) > 1: # This is probably a problem with Bio module
        chain = chain[5]
    seqres_seqs_by_chain[chain] = seq

adjustments = {}
for atom_seq in atom_seqs:
    seqres_seq = seqres_seqs_by_chain[atom_seq.id[5]]
    # TODO: Check if such exists
    align = pairwise2.align.globalxx(atom_seq.seq, seqres_seq.seq, one_alignment_only=True)[0]

    gaps_atom, gaps_seqres = 0, 0
    while align[0][gaps_atom] == '-':
        gaps_atom += 1
    while align[1][gaps_seqres] == '-':
        gaps_seqres += 1
    if first_id_of_chain[atom_seq.id[5]] != gaps_atom + 1:
        # print('Chain ' + atom_seq.id[5] + ' needs adjusting ' + str(gaps_atom + 1 - first_id_of_chain[atom_seq.id[5]]), file=sys.stderr)
        adjustments[atom_seq.id[5]] = gaps_atom + 1 - first_id_of_chain[atom_seq.id[5]]

renumberings = {
    'ATOM  ': [ [ 21, 22, 25 ] ],
    'CIPSEP': [ [ 15, 17, 20 ], [ 29, 31, 34 ] ],
    'HELIX ': [ [ 19, 21, 24 ], [ 31, 33, 36 ] ],
    'LINK  ': [ [ 21, 22, 25 ], [ 51, 52, 55 ] ],
    'SHEET ': [ [ 21, 22, 25 ], [ 32, 33, 36 ], [ 49, 50, 53 ], [ 64, 65, 68 ] ],
    'SITE  ': [ [ 22, 23, 26 ], [ 33, 34, 37 ], [ 44, 45, 48 ], [ 55, 56, 59 ] ],
    'SSBOND': [ [ 15, 17, 20 ], [ 29, 31, 34 ] ],
}

pdb = open(file, 'r')
for line in pdb:
    if line[0:6] in renumberings:
        for renumbering in renumberings[line[0:6]]:
            chain, start, end = renumbering
            end += 1
            if line[chain] in adjustments:
                new_residue = '    ' + str(int(line[start:end]) + adjustments[line[chain]])
                line = line[0:start] + new_residue[-4:] + line[end:]
    print(line, end='')
