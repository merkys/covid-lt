#!/usr/bin/env python3

# Align peptide sequences in ATOM records to the sequences in SEQRES records.
# Sometimes they may be off and need to be adjusted in case the further processing software is unable to do that.
# For example, Jackal does the alignment (plain renumbering starting from 1?) on its own, but does not renumber LINK and SSBOND records.
# In particular:
# - PDB 7AKJ record, chain C. Processing it with Jackal leaves SSBOND pointing to a missing residue.
# - PDB 6NB4 record, interaction between 104:A and 1:D. Jackal looses LINK record which is important.

# TODO: Implement an alternative solution using seq.alg.AlignToSEQRES() from OpenStructure:
# https://openstructure.org/docs/2.3.1/seq/alg/seqalg/

from Bio import BiopythonDeprecationWarning, pairwise2
from pdbio import PDBFile
from warnings import filterwarnings, warn
import argparse, sys

filterwarnings('ignore', category=BiopythonDeprecationWarning)

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
parser.add_argument('--output-alignment', action='store_true', help='Output the sequence alignment to STDERR')
parser.add_argument('--output-map', help='Specify a file to store renumbering map')
args = parser.parse_args()

files = args.files
if len(files) == 0:
    files = [sys.stdin]

pdb = PDBFile(files[0]) # for now

residue_map = {}

for chain in pdb:
    atom_seq = chain.sequence_atom().replace('X', '-')
    seqres_seq = chain.sequence_seqres(replace_unknown_with='X').replace('X', '-') # TODO: Check if not None

    if atom_seq.count('-') == len(atom_seq) or seqres_seq.count('-') == len(seqres_seq):
        warn('ATOM and/or SEQRES sequence for chain {} is undefined'.format(chain.name))
        continue

    # FIXME: Maybe globalxx() does not have the best scoring parameters.
    align = pairwise2.align.globalxx(atom_seq, seqres_seq, one_alignment_only=True)[0]
    if args.output_alignment:
        print('> {} ATOM'.format(chain.name), file=sys.stderr)
        print(align[0], file=sys.stderr)
        print('> {} SEQRES'.format(chain.name), file=sys.stderr)
        print(align[1], file=sys.stderr)

    atom_seq_aligned = list(align[0])
    seqres_seq_aligned = list(align[1])
    pos = 0
    while pos < len(atom_seq_aligned):
        if atom_seq_aligned[pos] == '-' and seqres_seq_aligned[pos] == '-':
            atom_seq_aligned.pop(pos)
            seqres_seq_aligned.pop(pos)
        pos += 1

    atom_pos = -1
    seqres_pos = -1
    last_insertion_code = ' '
    alignment = []
    for pos, _ in enumerate(atom_seq_aligned):
        if atom_seq_aligned[pos] != '-':
            atom_pos += 1
        if seqres_seq_aligned[pos] != '-':
            seqres_pos += 1
        if atom_seq_aligned[pos] != '-' and seqres_seq_aligned[pos] != '-':
            alignment.append((seqres_pos, ' '))
            last_insertion_code = ' '
        elif atom_seq_aligned[pos] != '-': # insertion with alternative locator
            if last_insertion_code == ' ':
                last_insertion_code = 'A'
            else:
                last_insertion_code = chr(ord(last_insertion_code)+1)
            alignment.append((seqres_pos, last_insertion_code))
        elif seqres_seq_aligned[pos] != '-': # deletion, missing residue
            pass # Nothing to do here

    residues_seen = 0
    residue_index = {}
    for residue in chain:
        residue_index[str(residue.number()) + residue.icode()] = residues_seen
        residues_seen += 1

    def renumber(orig_chain, number, icode):
        if orig_chain != chain.name:
            return None, None, None
        if str(number) + icode not in residue_index:
            warn('chain {}, residue {}, icode \'{}\' not found in the alignment, maybe they are HETATM?'.format(orig_chain, number, icode))
            return None, None, None
        index = residue_index[str(number) + icode]
        residue_map[chain.name + str(number) + icode] = chain.name + str(alignment[index][0]+1) + alignment[index][1]
        return None, alignment[index][0]+1, alignment[index][1]

    pdb.renumber(renumber)

print(pdb, end='')

if args.output_map:
    with open(args.output_map, 'w') as out:
        for key in sorted(residue_map.keys(), key=lambda x: (x[0], int(x[1:-1]), x[-1])):
            print(key.rstrip(), residue_map[key].rstrip(), sep="\t", file=out)
