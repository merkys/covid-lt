#!/usr/bin/python3

from Bio import AlignIO, PDB, SeqIO
from Bio.Align.Applications import MuscleCommandline
from subprocess import Popen, PIPE
import re, sys, warnings

warnings.filterwarnings('ignore', category=PDB.PDBExceptions.PDBConstructionWarning)

file = sys.argv[1] # for now

atom_seqs = [seq for seq in SeqIO.parse(file, 'pdb-atom')]
seqres_seqs = [seq for seq in SeqIO.parse(file, 'pdb-seqres')]

# TODO: Check if there is the same number of chains

parser = PDB.PDBParser()
model = parser.get_structure(atom_seqs[0].id[0:5], file)[0] # There may be more models?

first_id_of_chain = {}
for chain in model:
    residues = [res for res in chain]
    first_id_of_chain[chain.id] = residues[0].id[1]

atom_seqs_by_chain = {}
for seq in atom_seqs:
    atom_seqs_by_chain[seq.id[5]] = seq
seqres_seqs_by_chain = {}
for seq in seqres_seqs:
    seqres_seqs_by_chain[seq.id[5]] = seq

adjustments = {}
for atom_seq in atom_seqs:
    seqres_seq = seqres_seqs_by_chain[atom_seq.id[5]]
    # TODO: Check if such exists
    muscle = MuscleCommandline()
    child = Popen(str(muscle), stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True, text=True)
    SeqIO.write([atom_seq, seqres_seq], child.stdin, 'fasta')
    child.stdin.close()
    align = AlignIO.read(child.stdout, 'fasta')

    gaps_atom, gaps_seqres = 0, 0
    while align[0][gaps_atom] == '-':
        gaps_atom += 1
    while align[1][gaps_seqres] == '-':
        gaps_seqres += 1
    if first_id_of_chain[atom_seq.id[5]] != gaps_atom + 1:
        # print('Chain ' + atom_seq.id[5] + ' needs adjusting ' + str(gaps_atom + 1 - first_id_of_chain[atom_seq.id[5]]), file=sys.stderr)
        adjustments[atom_seq.id[5]] = gaps_atom + 1 - first_id_of_chain[atom_seq.id[5]]

renumberings = {
    'SSBOND': [ [ 15, 17, 20 ], [ 29, 31, 34 ] ],
}

pdb = open(file, 'r')
for line in pdb:
    if line[0:6] in renumberings:
        for renumbering in renumberings[line[0:6]]:
            chain, start, end = renumbering
            end += 1
            if line[chain] in adjustments:
                new_residue = '    ' + str(int(line[start:end]) + adjustments[line[chain]])
                line = line[0:start] + new_residue[-4:] + line[end:]
    print(line, end='')
