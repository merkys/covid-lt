#!/usr/bin/env python3

# Based on AlphaFold Amber minimization code:
# https://github.com/deepmind/alphafold/blob/197bd19ee371ebac1942951b49a01848d2c9c6fc/alphafold/relax/amber_minimize.py

try:
    from openmm import OpenMMException, app as openmm_app
    import openmm
except ModuleNotFoundError:
    from simtk import openmm
    from simtk.openmm import OpenMMException, app as openmm_app

import argparse, sys

def print_forces(system, simulation):
    """
    Based on https://openmm.github.io/openmm-cookbook/dev/notebooks/cookbook/Analyzing%20Energy%20Contributions.html
    """
    state = simulation.context.getState(getEnergy=True, getPositions=True)
    print('PotentialEnergy', state.getPotentialEnergy() / openmm.unit.kilojoule_per_mole, sep="\t")
    for i, force in enumerate(system.getForces()):
        state = simulation.context.getState(getEnergy=True, groups={i})
        print(force.__class__.__name__, state.getPotentialEnergy() / openmm.unit.kilojoule_per_mole, sep="\t")

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
parser.add_argument('--platform', help='Specify the platform to use for the simulation (by default the fastest available is used)')
parser.add_argument('--forcefield', action='append', help='Specify the forcefield, may be multiple (["amber99sb.xml"] by default)', default=[])
parser.add_argument('--max-iterations', type=int, help='Maximum number of iterations', default=1)
parser.add_argument('--print-forces', action='store_true', help='Suppress normal output, print forces instead')
args = parser.parse_args()

forcefields = args.forcefield
if not len(forcefields):
    forcefields = ['amber99sb.xml']

tolerance = 2.39

file = args.files[0] # for now

pdb = openmm_app.PDBFile(file)

system = None
if len(forcefields) == 1 and forcefields[0].endswith('.prm'): # CHARMM, use ParmEd to read
    from io import StringIO
    from parmed.charmm import CharmmParameterSet, CharmmPsfFile
    import parmed

    force_field = CharmmParameterSet(forcefields[0])

    # From https://bioinformaticsreview.com/20220829/how-to-convert-the-pdb-file-to-psf-format/
    psf_tmp_file = StringIO()
    parmed.load_file(file).write_psf(psf_tmp_file, vmd=True)
    psf_tmp_file.seek(0)
    psf = CharmmPsfFile(psf_tmp_file)

    system = psf.createSystem(force_field, nonbondedMethod=openmm_app.NoCutoff, constraints=openmm_app.HBonds, implicitSolvent=openmm_app.HCT)
else:
    force_field = openmm_app.ForceField(*forcefields)
    system = force_field.createSystem(pdb.topology, constraints=openmm_app.HBonds)
    # stiffness omitted here

# Splitting forces one force per group in order to be able to access them later
for i, f in enumerate(system.getForces()):
    f.setForceGroup(i)

# Find the most suitable platform
platform = None
if args.platform:
    platform = openmm.Platform.getPlatformByName(args.platform)
else:
    for platform_name in ['CUDA', 'OpenCL', 'CPU', 'Reference']:
        try:
            platform = openmm.Platform.getPlatformByName(platform_name)
            break
        except OpenMMException:
            pass # try next until something is found

integrator = openmm.LangevinIntegrator(0, 0.01, 0.0)
simulation = openmm_app.Simulation(pdb.topology, system, integrator, platform)
simulation.context.setPositions(pdb.positions)

if args.print_forces:
    print_forces(system, simulation)

if args.max_iterations:
    simulation.minimizeEnergy(maxIterations=args.max_iterations, tolerance=tolerance)

    if args.print_forces:
        print_forces(system, simulation)
    else:
        state = simulation.context.getState(getEnergy=True, getPositions=True)
        openmm_app.PDBFile.writeFile(simulation.topology, state.getPositions(), sys.stdout)
