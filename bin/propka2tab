#!/usr/bin/python3

import argparse, re, sys

def write_residue(residue):
    # Propka output does not identify atoms, thus two '?' are appended.
    return '\t'.join([residue['chain'], str(residue['res_nr']), residue['res_type'], '?', '?'])

def print_contact(res1, res2, comment):
    # Propka does not have neither area, nor distance, hence two '?'
    print(write_residue(res1), write_residue(res2), '?', '?', comment, sep='\t')

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
args = parser.parse_args()

files = args.files
if len(files) == 0:
    files = [sys.stdin]

for file in files:
    if isinstance(file, str):
        file = open(file, 'r')
    residues_seen = False
    for line in file:
        if not residues_seen:
            if re.match(' RESIDUE', line):
                residues_seen = True
            continue
        if line == '\n' or re.match('---------  -----', line):
            continue
        if line[0] == '-':
            residues_seen = False
            continue
        res1 = { 'chain': line[8], 'res_nr': int(line[3:8]), 'res_type': line[0:3] }
        resS = { 'chain': line[66], 'res_nr': int(line[61:66]), 'res_type': line[58:61] }
        resB = { 'chain': line[84], 'res_nr': int(line[79:84]), 'res_type': line[76:79] }
        resC = { 'chain': line[102], 'res_nr': int(line[97:102]), 'res_type': line[94:97] }
        if resS['res_type'] != 'XXX':
            print_contact(res1, resS, 'sidechain hbond')
        else:
            resS = None
        if resB['res_type'] != 'XXX':
            print_contact(res1, resB, 'backbone hbond')
        else:
            resB = None
        if resC['res_type'] != 'XXX':
            print_contact(res1, resC, 'coulombic')
        else:
            resC = None
