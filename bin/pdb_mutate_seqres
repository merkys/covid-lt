#!/usr/bin/env python3

from Bio.Data.IUPACData import protein_letters_1to3, protein_letters_3to1
from re import fullmatch
from warnings import warn
import argparse, sys

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*', default=[sys.stdin])
parser.add_argument('--replace', action='append', help='Specify replacements', default=[])
parser.add_argument('--delete', action='append', help='Specify deletions', default=[])
args = parser.parse_args()

def unpack_seqres(lines):
    seqres = {}
    for line in lines:
        line_no = int(line[7:10])
        chain = line[11]
        if chain not in seqres:
            seqres[chain] = []
        for i in range(0,13):
            seqres[chain].append(protein_letters_3to1[line[19+i*4:22+i*4]])
    return seqres

def pack_seqres(seqres):
    for chain in sorted(seqres):
        line_no = 1
        length = len(seqres[chain])
        while len(seqres[chain]) >= 13:
            print("SEQRES% 4d %s% 5d " % line_no, chain, length)
            for i in range(0,13):
                print(" ", protein_letters_1to3[seqres[chain].pop(0)])
            line_no += 1
        if len(seqres[chain]):
            print("SEQRES% 4d %s% 5d " % line_no, chain, length)
            while len(seqres[chain]):
                print(" ", protein_letters_1to3[seqres[chain].pop(0)])

replace_by_chain = {}
for replacement in args.replace:
    m = fullmatch('([A-Z])([A-Z])?([0-9]+)([A-Z])', replacement)
    if not m:
        raise ValueError('replacement {} cannot be understood'.format(replacement))
    chain = m.group(2) if m.group(2) else 'any'
    fro, pos, to = m.group(1), int(m.group(3)), m.group(4)
    if chain not in replace_by_chain:
        replace_by_chain[chain] = {}
    replace_by_chain[chain][pos] = { 'from': protein_letters_1to3[fro].upper(),
                                     'to':   protein_letters_1to3[to].upper() }

delete_by_chain = {}
for deletion in args.delete:
    m = fullmatch('([A-Z])([A-Z])?([0-9]+)-?', deletion)
    if not m:
        raise ValueError('deletion {} cannot be understood'.format(deletion))
    chain = m.group(2) if m.group(2) else 'any'
    fro, pos = m.group(1), int(m.group(3))
    if chain not in delete_by_chain:
        delete_by_chain[chain] = {}
    delete_by_chain[chain][pos] = { 'from': protein_letters_1to3[fro].upper() }

for pdb in args.files:
    if isinstance(pdb, str):
        pdb = open(pdb, 'r')
    for line in pdb:
        if line[0:6] == 'SEQRES':
            line_no = int(line[7:10])
            chain = line[11]
            mutations_for_chain = replace_by_chain['any'] if 'any' in replace_by_chain else {}
            deletions_for_chain = delete_by_chain['any'] if 'any' in delete_by_chain else {}
            if chain in replace_by_chain:
                mutations_for_chain = { **mutations_for_chain, **replace_by_chain[chain] }
            if chain in delete_by_chain:
                deletions_for_chain = { **deletions_for_chain, **delete_by_chain[chain] }
            if mutations_for_chain:
                for i in range(0,13):
                    resname = line[19+i*4:22+i*4]
                    pos = (line_no-1)*13+i+1
                    if resname == '   ':
                        continue
                    if mutations_for_chain and pos in mutations_for_chain:
                        if mutations_for_chain[pos]['from'] != resname:
                            raise ValueError('chain {} position {} is {} while mutation requests {}'.format(chain, pos, resname, mutations_for_chain[pos]['from']))
                        line = line[0:19+i*4] + mutations_for_chain[pos]['to'] + line[22+i*4:]
        print(line, end='')
