#!/usr/bin/env python3

from Bio import AlignIO, PDB, SeqIO
import argparse, re, sys, warnings

warnings.filterwarnings('ignore', category=PDB.PDBExceptions.PDBConstructionWarning)

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
parser.add_argument('--blastp', action='append', default=[], help='Add output log of blastp to identify chains (may be multiple)')
parser.add_argument('--hmmsearch', action='append', default=[], help='Add output log of hmmsearch to identify chains (may be multiple)')
parser.add_argument('--with-lengths', action='store_true', help='Include chain lengths')
args = parser.parse_args()

files = args.files
if len(files) == 0:
    files = [sys.stdin]

searched_chain_ids = {}
for log in args.blastp:
    file = open(log, 'r')
    for line in file.readlines():
        match = re.match('(....)_(.)\s+\S+\s+\S+\s+(\S+)\s+(\S+)', line)
        if match and int(match.group(3)) >= 100 and float(match.group(4)) >= 90:
            pdb_id = match.group(1).upper()
            chain = match.group(2)
            if pdb_id not in searched_chain_ids:
                searched_chain_ids[pdb_id] = {}
            if chain in searched_chain_ids[pdb_id]:
                # Rare case when more than one file matches the same chain
                searched_chain_ids[pdb_id][chain] += ',' + log
            else:
                searched_chain_ids[pdb_id][chain] = log
    file.close()
for log in args.hmmsearch:
    file = open(log, 'r')
    in_main = False
    for line in file:
        if in_main:
            if re.match('  ------ inclusion threshold', line) or line == '\n':
                break
            pdb_id = line[60:64].upper()
            chain = line[65]
            if pdb_id not in searched_chain_ids:
                searched_chain_ids[pdb_id] = {}
            if chain in searched_chain_ids[pdb_id]:
                # Rare case when more than one file matches the same chain
                searched_chain_ids[pdb_id][chain] += ',' + log
            else:
                searched_chain_ids[pdb_id][chain] = log
        elif re.match('    ------- ------', line):
            in_main = True
    file.close()

for file in files:
    if args.with_lengths:
        atom_seqs = [seq for seq in SeqIO.parse(file, 'pdb-atom')]
        seqres_seqs = [seq for seq in SeqIO.parse(file, 'pdb-seqres')]

        atom_seqs_by_chain = {}
        for seq in atom_seqs:
            atom_seqs_by_chain[seq.id[5]] = seq
        seqres_seqs_by_chain = {}
        for seq in seqres_seqs:
            chain = seq.id
            if len(chain) > 1: # This is probably a problem with Bio module
                chain = chain[5]
            seqres_seqs_by_chain[chain] = seq

    pdb_id   = None
    molecule = None
    if isinstance(file, str):
        file = open(file, 'r')
    for line in file:
        line = re.sub("\s*;?\s*\n$", "", line)
        if re.match("HEADER ", line):
            pdb_id = line[62:66]
        elif re.match("COMPND ", line):
            if line[11:20] == 'MOLECULE:':
                molecule = line[21:]
            elif line[11:17] == 'CHAIN:':
                for chain in re.split("\s*,\s*", line[18:]):
                    additional_info = '?'
                    if pdb_id in searched_chain_ids and chain in searched_chain_ids[pdb_id]:
                        additional_info = searched_chain_ids[pdb_id][chain]
                    output = [pdb_id, chain, molecule]
                    if args.with_lengths:
                        atom_seq_length = '?'
                        seqres_seq_length = '?'
                        if chain in atom_seqs_by_chain:
                            atom_seq_length = len(atom_seqs_by_chain[chain])
                        if chain in seqres_seqs_by_chain:
                            seqres_seq_length = len(seqres_seqs_by_chain[chain])
                        output = output + [atom_seq_length, seqres_seq_length]

                    print(*output, additional_info, sep='\t')
