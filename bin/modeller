#! /bin/bash
#------------------------------------------------------------------------------
#$Author: andrius $
#$Date: 2022-04-21 13:49:22 +0300 (Kt, 21 bal. 2022) $
#$Revision: 6417 $
#$URL: svn+ssh://saulius-grazulis.lt/home/andrius/svn-repositories/andrius/paskaitos/bioinformatika/bin/modeller $
#------------------------------------------------------------------------------
#*
#  Wrapper for Modeller.
#**

setvar() { eval $1="'$3'"; }

setvar EXCLUDE = ''
setvar ONLY = ''
setvar FILES = ''

for MOD in mod9.12 mod9.17 mod10.2
do
    type ${MOD} >/dev/null 2>&1 && setvar MODELLER = ${MOD}
done
if [ -z "${MODELLER}" ]
then
    echo $0: executable for modeller \(modX.YZ\) cannot be found >&2
    exit 1
fi

setvar MODELLER_CLASS = automodel

setvar CWD = $(pwd)
setvar PDB_PATH = .

setvar NMODELS = 1
setvar LIBRARY_SCHEDULE = normal
setvar MDSA = None
setvar REPEAT_OPTIMISATION = 1

setvar FILEBASE = input.pir

setvar BEST = ''
setvar LOG_TO_STDERR = ''

while [ $# -gt 0 ]
do
    case $1 in
        --best)
            setvar BEST = 1
            ;;
        --automodel)
            setvar MODELLER_CLASS = automodel
            ;;
        --loopmodel)
            setvar MODELLER_CLASS = loopmodel
            ;;
        --modeller-class)
            setvar MODELLER_CLASS = $2
            shift
            ;;
        -n|--number)
            setvar NMODELS = $2
            shift
            ;;
        --schedule)
            setvar LIBRARY_SCHEDULE = $2
            shift
            ;;
        --mdsa-speed)
            setvar MDSA = refine.$2
            shift
            ;;
        --repeat)
            setvar REPEAT_OPTIMISATION = $2
            shift
            ;;
        --pdb-path)
            setvar PDB_PATH = $2
            shift
            ;;
        --exclude)
            setvar EXCLUDE = $2
            shift
            ;;
        --only)
            setvar ONLY = $2
            shift
            ;;
        --all)
            setvar EXCLUDE = ''
            setvar ONLY = ''
            ;;
        --log-to-stderr)
            setvar LOG_TO_STDERR = 1
            ;;
      -*) echo "`basename $0`: unknown option $1" >&2 ; exit 1 ;;
      *)  FILES="$FILES $1" ;;
    esac
    shift
done

if [ -z "${FILES}" ]
then
    setvar FILES = -
fi

for f in ${FILES}
do
    setvar TMPDIR  = $(mktemp --directory)
    setvar SCRIPT  = ${TMPDIR}/make-model.py
    setvar INPFILE = ${TMPDIR}/${FILEBASE}

    cat $f > ${INPFILE}
    setvar SEQUENCE = "$(grep -v '^#' ${INPFILE} | head -n 1 | cut -d ';' -f 2)"
    if [ -n "${ONLY}" ]
    then
        setvar KNOWNS = "$(echo "${ONLY}" \
                            | perl -lne 'print join( ",", map( "\"$_\"", split( ",", $_ ) ) )')"
    else
        setvar KNOWNS = "$(comm -2 -3 <(grep '^>' ${INPFILE} \
                                        | cut -d ';' -f 2 \
                                        | grep -v ${SEQUENCE} \
                                        | sort \
                                        | uniq) \
                                      <(echo "${EXCLUDE}" \
                                        | perl -lne 'print join( "\n", split( ",", $_ ) )' \
                                        | sort) \
                                      | perl -e 'print join( ",", map { s/\n$//; "\"$_\"" } <> )' )"
    fi

    if ! grep -v '^>' ${INPFILE} | grep -v : | grep --quiet -F -
    then
        setvar MODELLER_CLASS = automodel
        echo "`basename $0`: no gaps in input, defaulting to automodel" >&2
    fi

cat > ${SCRIPT} <<END
from modeller import *
from modeller.automodel import *

pdb_path = "${PDB_PATH}".split(':')

for i in range(0, len(pdb_path)):
    if not pdb_path[i].startswith('/'):
        pdb_path[i] = "${CWD}/" + pdb_path[i]

env = environ()
env.io.atom_files_directory = pdb_path
a = ${MODELLER_CLASS}( env,
                       alnfile = '${FILEBASE}',
                       knowns = (${KNOWNS}),
                       sequence = '${SEQUENCE}')

# Speed of variable target function method:
a.library_schedule = autosched.${LIBRARY_SCHEDULE}

# Speed of molecular dynamics with simulated annealing:
a.md_level = ${MDSA}

a.repeat_optimization = ${REPEAT_OPTIMISATION}

a.starting_model = 1
a.ending_model = ${NMODELS}

a.make()
END

    pushd ${TMPDIR} > /dev/null
    ${MODELLER} $(basename ${SCRIPT})
    setvar STATUS = $?
    popd > /dev/null

    if [ ${STATUS} == 0 ]
    then
        if [ -n "${BEST}" ]
        then
            # Modeller objective function has to be minimised, see:
            # https://salilab.org/modeller/10.2/manual/node493.html
            if [ "${MODELLER_CLASS}" == "loopmodel" ]
            then
                grep --with-filename 'MODELLER OBJECTIVE FUNCTION' ${TMPDIR}/model.BL*.pdb \
                    | sort -nrk 6.6 \
                    | head -n 1 \
                    | cut -d : -f 1 \
                    | xargs cat
            else
                grep --with-filename 'MODELLER OBJECTIVE FUNCTION' ${TMPDIR}/*.pdb \
                    | sort -nrk 6.6 \
                    | head -n 1 \
                    | cut -d : -f 1 \
                    | xargs cat
            fi
        else
            find ${TMPDIR} -name \*.pdb | sort | xargs cat
        fi
    fi

    if [ ${STATUS} != 0 -o -n "${LOG_TO_STDERR}" ]
    then
        cat ${TMPDIR}/make-model.log >&2
    fi

    rm -rf ${TMPDIR}

    test ${STATUS} != 0 && exit ${STATUS}
done
