#!/usr/bin/python3

import argparse, sys, warnings

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
parser.add_argument('--cluster-file', help='A file to extract clustering infomation from')
parser.add_argument('--cluster-id', help='Select a particular cluster')
parser.add_argument('--collate', choices=['most-contacts', 'average', 'most-residues'], default='most-contacts', help='Collation method for a cluster')
parser.add_argument('--quality-map', help='File containing quality map')
args = parser.parse_args()

# Process the cluster file
clusters = None
if args.cluster_file:
    file = open(args.cluster_file, 'r')
    clusters = {}
    for line in file:
        pdb_id, chain, cluster = line.rstrip().split('\t')
        if cluster not in clusters:
            clusters[cluster] = set()
        clusters[cluster].add(pdb_id)

# Process the quality map, if given
quality = None
if args.collate == 'most-residues':
    if not args.quality_map:
        raise Exception('Collation \'most-residues\' requires a quality map')
    file = open(args.quality_map, 'r')
    quality = {}
    pdb_ids = None
    for line in file:
        if pdb_ids is None:
            pdb_ids = line.rstrip().split('\t')
        else:
            for i, is_modeled in enumerate(line.rstrip().split('\t')):
                if is_modeled == 'Y':
                    if pdb_ids[i] not in quality:
                        quality[pdb_ids[i]] = 0
                    quality[pdb_ids[i]] += 1

files = args.files
if len(files) == 0:
    files = [sys.stdin]

# Process the contact maps
for file in files:
    if isinstance(file, str):
        file = open(file, 'r')
    pdb_ids = None
    contacts = None
    for line in file:
        if pdb_ids is None:
            pdb_ids = line.rstrip().split('\t')
            contacts = {pdb_id: [] for pdb_id in pdb_ids}
            continue
        for i, contact in enumerate(line.rstrip().split('\t')):
            contacts[pdb_ids[i]].append(contact)

    # Attempt joining clusters
    if clusters:
        if args.cluster_id is not None:
            for pdb_id in pdb_ids:
                if not args.cluster_id in clusters or not pdb_id in clusters[args.cluster_id]:
                    contacts.pop(pdb_id)
        else:
            for cluster in clusters:
                representative = None
                cluster_ids = []
                for pdb_id in clusters[cluster]:
                    if not pdb_id in contacts:
                        continue
                    cluster_ids.append(pdb_id)
                    if representative:
                        if args.collate == 'most-contacts':
                            if contacts[representative].count('?') > contacts[pdb_id].count('?'):
                                representative = pdb_id
                        else: # 'most-residues'
                            if representative not in quality or pdb_id not in quality:
                                if representative not in quality:
                                    warnings.warn(representative + ' not in quality map')
                                if pdb_id not in quality:
                                    warnings.warn(pdb_id + ' not in quality map')
                                continue
                            if quality[representative] < quality[pdb_id]:
                                representative = pdb_id
                    else:
                        representative = pdb_id
                if args.collate in ['most-contacts', 'most-residues']:
                    if not representative:
                        continue
                    for pdb_id in cluster_ids:
                        if pdb_id != representative:
                            contacts.pop(pdb_id)
                elif cluster_ids: # 'average'
                    averaged = []
                    for i in range(len(contacts[cluster_ids[0]])):
                        cluster_contacts = []
                        for pdb_id in cluster_ids:
                            if contacts[pdb_id][i] != '?':
                                cluster_contacts.append(float(contacts[pdb_id][i]))
                        if cluster_contacts:
                            averaged.append(sum(cluster_contacts)/len(cluster_contacts))
                        else:
                            averaged.append('?')
                    for pdb_id in cluster_ids:
                        contacts.pop(pdb_id)
                    contacts[','.join(cluster_ids)] = averaged

    # Print the filtered contacts
    pdb_ids = [pdb_id for pdb_id in contacts]
    print(*pdb_ids, sep='\t')
    if pdb_ids:
        for i in range(len(contacts[pdb_ids[0]])):
            print(*[contacts[pdb_id][i] for pdb_id in contacts], sep='\t')
