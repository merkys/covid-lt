#!/usr/bin/env python3

# Select chain(s) from a PDB file.

chain_identifiers = {
    'ANISOU': [ 21 ],
    'ATOM  ': [ 21 ],
    'CIPSEP': [ 15, 29 ],
    'DBREF ': [ 12 ],
    'DBREF1': [ 12 ],
    'DBREF2': [ 12 ],
    'HELIX ': [ 19, 31 ],
    'LINK  ': [ 21, 51 ],
    'SHEET ': [ 21, 32, 49, 64 ],
    'SITE  ': [ 22, 33, 44, 55 ],
    'SEQRES': [ 11 ],
    'SSBOND': [ 15, 29 ],
}

import argparse, re, sys

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
parser.add_argument('--chain', action='append', help='Select certain chain(s), may be multiple')
args = parser.parse_args()

files = args.files
if len(files) == 0:
    files = [sys.stdin]

for file in files:
    if isinstance(file, str):
        file = open(file, 'r')
    compnd = None
    for line in file:
        keyword = line[0:6]
        if keyword == 'COMPND': # Read in COMPND records
            if not compnd:
                compnd = []
            if re.match('COMPND.{4,5}MOL_ID:', line):
                compnd.append({})
            elif re.match('COMPND.{5}CHAIN:', line):
                compnd[-1]['CHAIN'] = set(re.split('\s*,\s*', re.sub('\s*;?\s*\n$', '', line[18:])))
            else:
                match = re.match('COMPND.{5}(\S+?): (.+)', line)
                compnd[-1][match.group(1)] = match.group(2)
            continue
        if compnd: # Formulate new COMPND records
            line_nr = 1
            mol_nr = 1
            for mol in range(len(compnd)):
                if set(args.chain).isdisjoint(compnd[mol]['CHAIN']):
                    continue
                if line_nr == 1:
                    print('COMPND    ', end='')
                else:
                    print('COMPND% 4d ' % line_nr, end='')
                print('MOL_ID: %d;' % mol_nr)
                mol_nr += 1
                line_nr += 1

                print('COMPND% 4d MOLECULE: %s' % (line_nr, compnd[mol]['MOLECULE']))
                line_nr += 1

                compnd[mol]['CHAIN'] = compnd[mol]['CHAIN'] & set(args.chain)
                print('COMPND% 4d CHAIN: %s;' % (line_nr, ', '.join(compnd[mol]['CHAIN'])))
                line_nr += 1

                for key in compnd[mol]:
                    if key in ['CHAIN', 'MOLECULE']:
                        continue
                    print('COMPND% 4d %s: %s' % (line_nr, key, compnd[mol][key]))
                    line_nr += 1
            compnd = None
        if keyword not in chain_identifiers or not args.chain:
            print(line, end='')
            continue
        mentioned_chains = set([line[x] for x in chain_identifiers[keyword]])
        if set(args.chain).isdisjoint(mentioned_chains):
            continue
        print(line, end='')
