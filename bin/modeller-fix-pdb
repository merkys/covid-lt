#!/usr/bin/python3

# Modeller needs to know its LD_LIBRARY_PATH
# LD_LIBRARY_PATH=/usr/local/lib

from Bio import AlignIO, SeqIO
from Bio.Align.Applications import MuscleCommandline
from Bio.Alphabet import IUPAC
from Bio.SeqRecord import SeqRecord
from subprocess import Popen, PIPE
import sys

file = sys.argv[1] # for now

# Extract sequences from the input file
atom_seqs = [seq for seq in SeqIO.parse(file, 'pdb-atom')]
seqres_seqs = [seq for seq in SeqIO.parse(file, 'pdb-seqres')]
chains = [seq.id[5] for seq in atom_seqs]

# TODO: Check if chains are the same

first = {}
last = {}
chains = []
for line in open(file, 'r').readlines():
    if line[0:6] != 'ATOM  ':
        continue
    chain = line[21]
    resno = int(line[22:26])
    if not chain in chains:
        chains.append(chain)
    if not chain in first:
        first[chain] = resno
    last[chain] = resno

atom_seqs_by_chain = {}
for seq in atom_seqs:
    atom_seqs_by_chain[seq.id[5]] = seq
seqres_seqs_by_chain = {}
for seq in seqres_seqs:
    chain = seq.id
    if len(chain) > 1: # This is probably a problem with Bio module
        chain = chain[5]
    seqres_seqs_by_chain[chain] = seq

sequence_seq = None
structure_seq = None

for chain in chains:
    atom_seq = atom_seqs_by_chain[chain]
    seqres_seq = seqres_seqs_by_chain[chain]
    # TODO: Check if such exists
    muscle = MuscleCommandline()
    child = Popen(str(muscle), stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True, text=True)
    SeqIO.write([seqres_seq, atom_seq], child.stdin, 'fasta')
    child.stdin.close()
    align = AlignIO.read(child.stdout, 'fasta')
    sequence, structure = align
    structure = structure.seq.tomutable()
    for pos, aa in enumerate(structure):
        if aa == 'X':
            structure[pos] = '-'
    sequence.description = 'sequence:::::::::'
    sequence.name = None
    sequence.seq.alphabet = IUPAC.protein
    structure.alphabet = IUPAC.protein
    structure = SeqRecord(structure.toseq())
    structure.id = sequence.id
    pdbid, chain = sequence.id.split(':')
    structure.description = 'structureX:{}:{}:{}:{}:{}::::'.format(pdbid, first[chain], chain, last[chain], chain)
    structure.name = None
    sequence.id = 'model' + chain
    # SeqIO.write([sequence, structure], sys.stdout, 'pir')

    if sequence_seq:
        sequence_seq += '/'
    else:
        sequence_seq = ''
    sequence_seq += str(sequence.seq)

    if structure_seq:
        structure_seq += '/'
    else:
        structure_seq = ''
    structure_seq += str(structure.seq)

print('>P1;model', 'sequence:::::::::', sequence_seq + '*', sep='\n')
print('>P1;7A5S', 'structureX:7A5S:{}:{}:{}:{}::::'.format(first[chains[0]], chains[0], last[chains[-1]], chains[-1]), structure_seq + '*', sep='\n')
