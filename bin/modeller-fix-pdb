#!/usr/bin/python3

# Modeller needs to know its LD_LIBRARY_PATH
# LD_LIBRARY_PATH=/usr/local/lib

from Bio import AlignIO, SeqIO
from Bio.Align.Applications import MuscleCommandline
from Bio.Alphabet import IUPAC
from Bio.SeqRecord import SeqRecord
from subprocess import Popen, PIPE
import sys

file = sys.argv[1] # for now

atom_seqs = [seq for seq in SeqIO.parse(file, 'pdb-atom')]
seqres_seqs = [seq for seq in SeqIO.parse(file, 'pdb-seqres')]

# TODO: Check if there is the same number of chains

atom_seqs_by_chain = {}
for seq in atom_seqs:
    atom_seqs_by_chain[seq.id[5]] = seq
seqres_seqs_by_chain = {}
for seq in seqres_seqs:
    chain = seq.id
    if len(chain) > 1: # This is probably a problem with Bio module
        chain = chain[5]
    seqres_seqs_by_chain[chain] = seq

adjustments = {}
for atom_seq in atom_seqs:
    seqres_seq = seqres_seqs_by_chain[atom_seq.id[5]]
    # TODO: Check if such exists
    muscle = MuscleCommandline()
    child = Popen(str(muscle), stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True, text=True)
    SeqIO.write([seqres_seq, atom_seq], child.stdin, 'fasta')
    child.stdin.close()
    align = AlignIO.read(child.stdout, 'fasta')
    sequence, structure = align
    structure = structure.seq.tomutable()
    for pos, aa in enumerate(structure):
        if aa == 'X':
            structure[pos] = '-'
    sequence.description = 'sequence:::::::::'
    sequence.name = None
    sequence.seq.alphabet = IUPAC.protein
    structure.alphabet = IUPAC.protein
    SeqIO.write([sequence, SeqRecord(structure.toseq())], sys.stdout, 'pir')
