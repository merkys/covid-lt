#!/usr/bin/env python3

import argparse, re, sys

def write_atom(atom):
    return '\t'.join([atom['chain'], atom['res_nr'], atom['res_type'], atom['atom_nr'], atom['atom_type']])

def register_contact(contacts, atom1, atom2, distance, area, comment):
    if atom1['chain'] not in contacts:
        contacts[atom1['chain']] = {}
    if atom1['res_nr'] not in contacts[atom1['chain']]:
        contacts[atom1['chain']][atom1['res_nr']] = {}
    if atom2['chain'] not in contacts[atom1['chain']][atom1['res_nr']]:
        contacts[atom1['chain']][atom1['res_nr']][atom2['chain']] = {}
    if atom2['res_nr'] not in contacts[atom1['chain']][atom1['res_nr']][atom2['chain']]:
        contacts[atom1['chain']][atom1['res_nr']][atom2['chain']][atom2['res_nr']] = []
    contacts[atom1['chain']][atom1['res_nr']][atom2['chain']][atom2['res_nr']].append([atom1, atom2, distance, area, comment])

def is_possible_salt_bridge(atom1, atom2):
    # Will ignore unknown atom types
    types = {}
    for atom in [atom1, atom2]:
        types[atom['res_type']] = atom
    if 'ARG' not in types and 'LYS' not in types:
        return False
    if 'ASP' not in types and 'GLU' not in types:
        return False
    if 'ARG' in types and types['ARG']['atom_type'] not in ['NH1', 'NH2']:
        return False
    if 'LYS' in types and types['LYS']['atom_type'] != 'NZ':
        return False
    if 'ASP' in types and types['ASP']['atom_type'] not in ['OD1', 'OD2']:
        return False
    if 'GLU' in types and types['GLU']['atom_type'] not in ['OE1', 'OE2']:
        return False
    return True

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
parser.add_argument('--chain', action='append')
parser.add_argument('--between', action='append', default=[], help='Given two groups of chains, select only contacts between the given groups')
parser.add_argument('--not-among', action='append', default=[], help='Exclude contacts among given chains, may be multiple')
parser.add_argument('--contacting-chains', action='store_true', help='List all contacting pairs of chains, suppress normal output')
parser.add_argument('--exclude-self', action='store_true', help='Exclude contacts of a chain with itself')
parser.add_argument('--exclude-hetero', action='store_true', help='Exclude contacts with non-protein residues')
parser.add_argument('--cut', action='append', help='Select only a range of a specified chain, for example, "A:1-10"', default=[])
# Minimal distance between any two atoms in residues is taken as the distance between them, just as in ProteinTools, ref:
# Ferruz et al., doi:10.1093/nar/gkab375
parser.add_argument('--merge', choices=['area-sum', 'dist-median', 'dist-min'])
args = parser.parse_args()

chains = []
if args.chain:
    chains = sorted(list(''.join(args.chain)))

if args.between and len(args.between) != 2:
    raise ValueError('Two groups of chains have to be given via \'--between\' option')

cuts = {}
for cut in args.cut:
    if cut[0] not in cuts:
        cuts[cut[0]] = []
    start, end = re.split('-', cut[2:])
    cuts[cut[0]].append([int(start), int(end)])

files = args.files
if len(files) == 0:
    files = [sys.stdin]

for file in files:
    if isinstance(file, str):
        file = open(file, 'r')
    contacts = {}
    for line in file:
        atom1, atom2 = {}, {}
        fields = line.strip().split('\t')
        atom1['chain'], atom1['res_nr'], atom1['res_type'], atom1['atom_nr'], atom1['atom_type'], \
            atom2['chain'], atom2['res_nr'], atom2['res_type'], atom2['atom_nr'], atom2['atom_type'], *fields = fields
        if atom1['chain'] > atom2['chain']:
            atom1, atom2 = atom2, atom1
        elif atom1['chain'] == atom2['chain'] and int(atom1['res_nr']) > int(atom2['res_nr']):
            atom1, atom2 = atom2, atom1
        area, distance, comment = fields
        area = float(area) if area != '?' else 0
        distance = float(distance) if distance != '?' else float('inf')
        if chains and atom1['chain'] not in chains and atom2['chain'] not in chains:
            continue
        if args.exclude_self and atom1['chain'] == atom2['chain']:
            continue
        if args.between:
            if atom1['chain'] in set(args.between[0]) and atom2['chain'] in set(args.between[1]):
                pass
            elif atom1['chain'] in set(args.between[1]) and atom2['chain'] in set(args.between[0]):
                pass
            else:
                continue
        for excluded in args.not_among:
            if atom1['chain'] in set(excluded) and atom2['chain'] in set(excluded):
                continue
        if atom1['chain'] in cuts:
            found = list(filter(lambda cut: int(atom1['res_nr']) >= cut[0] and int(atom1['res_nr']) <= cut[1], cuts[atom1['chain']]))
            if not found:
                continue
        if atom2['chain'] in cuts:
            found = list(filter(lambda cut: int(atom2['res_nr']) >= cut[0] and int(atom2['res_nr']) <= cut[1], cuts[atom2['chain']]))
            if not found:
                continue
        if args.exclude_hetero:
            from Bio.Data.IUPACData import protein_letters_3to1
            if atom1['res_type'].capitalize() not in protein_letters_3to1:
                continue
            if atom2['res_type'].capitalize() not in protein_letters_3to1:
                continue
        contact = '?'
        # Salt bridge filtering is implemented as in ProteinTools, ref:
        # Ferruz et al., doi:10.1093/nar/gkab375
        if is_possible_salt_bridge(atom1, atom2) and distance is not None and distance < 4:
            contact = 'salt bridge'
        # Hydrophobic ILV cluster detection is implemented similarly as in ProteinTools, ref:
        # Ferruz et al., doi:10.1093/nar/gkab375
        elif atom1['res_type'] in ['ILE', 'LEU', 'VAL'] and \
            atom2['res_type'] in ['ILE', 'LEU', 'VAL']:
            contact = 'hydrophobic'
        if comment == '?':
            fields[2] = contact
        register_contact(contacts, atom1, atom2, distance, area, fields[2])
        if not args.merge and not args.contacting_chains:
            print(write_atom(atom1), write_atom(atom2), *fields, sep='\t')
    if args.contacting_chains:
        contacting_chains = {}
        for c1 in contacts:
            for r1 in contacts[c1]:
                for c2 in contacts[c1][r1]:
                    if c1 not in contacting_chains:
                        contacting_chains[c1] = set()
                    if c2 not in contacting_chains:
                        contacting_chains[c2] = set()
                    contacting_chains[c1].add(c2)
                    contacting_chains[c2].add(c1)
        for chain in contacting_chains:
            if contacting_chains[chain]:
                print(chain, ','.join(sorted(contacting_chains[chain])), sep='\t')
    if args.merge:
        for c1 in contacts:
            for r1 in contacts[c1]:
                for c2 in contacts[c1][r1]:
                    for r2 in contacts[c1][r1][c2]:
                        comments = set(contact[4] for contact in contacts[c1][r1][c2][r2])
                        if len(comments) > 1 and '?' in comments:
                            comments.remove('?')
                        comments = ','.join(comments)
                        if args.merge == 'area-sum':
                            print(c1, r1, c2, r2, sum([contact[3] for contact in contacts[c1][r1][c2][r2]]), comments, sep='\t')
                        elif args.merge == 'dist-median':
                            from statistics import median
                            print(c1, r1, c2, r2, median([contact[2] for contact in contacts[c1][r1][c2][r2]]), comments, sep='\t')
                        elif args.merge == 'dist-min':
                            print(c1, r1, c2, r2, min([contact[2] for contact in contacts[c1][r1][c2][r2]]), comments, sep='\t')
