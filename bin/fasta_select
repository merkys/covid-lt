#!/usr/bin/env python3

from Bio import SeqIO
from Bio.Seq import Seq
import argparse, re, sys

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
parser.add_argument('--hmmsearch', help='Specify the output log of hmmsearch for selection')
parser.add_argument('--pdb-ids', help='Specify comma-separated list of PDB IDs for selection. Currently works only with --hmmsearch option.')
parser.add_argument('--id', help='Specify FASTA header up to first space symbol')
parser.add_argument('--min-length', type=int, help='Specify minimum length of a sequence')
args = parser.parse_args()

selected = None
if args.hmmsearch:
    selected = {}
    file = open(args.hmmsearch, 'r')
    in_main = False
    for line in file:
        if in_main:
            if re.match('  ------ inclusion threshold', line) or line == '\n':
                break
            pdb_id = line[60:64].upper()
            chain = line[65]
            if pdb_id not in selected:
                selected[pdb_id] = {}
            selected[pdb_id][chain] = 1
        elif re.match('    ------- ------', line):
            in_main = True

if args.pdb_ids:
    selected_pdb_ids = args.pdb_ids.split(',')
    if selected:
        selected_now = {}
        for pdb_id in selected_pdb_ids:
            if pdb_id in selected:
                selected_now[pdb_id] = selected[pdb_id]
        selected = selected_now

files = args.files
if len(files) == 0:
    files = [sys.stdin]

for file in files:
    for sequence in SeqIO.parse(file, 'fasta'):
        if args.min_length and len(sequence) < args.min_length:
            # Skip too short sequences
            continue
        if len(sequence.id) == 1:
            # These are entries with DBREF1/DBREF2 records instead of DBREF
            # See https://github.com/biopython/biopython/issues/3887
            continue
        pdb_id = sequence.id[0:4].upper()
        chain = sequence.id[5]
        if selected and (pdb_id not in selected or chain not in selected[pdb_id]):
            continue
        if args.id and sequence.id != args.id:
            continue
        SeqIO.write([sequence], sys.stdout, format='fasta')
