#!/usr/bin/env python3

# Rename chains in PDB file.

from pdbio.pdbfile import PDBFile
import argparse, re, sys

parser = argparse.ArgumentParser()
parser.add_argument('files', nargs='*')
parser.add_argument('--source', help='A file to take chain names from')
parser.add_argument('--map', action='append', help='Provide two chain names from which to which to rename (may be several)')
parser.add_argument('--align', action='append', help='Provide a single letter, \':\' and file name with FASTA sequence to rename if matches')
parser.add_argument('--identity-threshold', type=float, default=0, help='Specify identity threshold for alignments (default 0)')
parser.add_argument('--use-anarci', action='store_true', help='Use ANARCI to identify heavy and light antibody chains')
parser.add_argument('--guess', action='store_true', help='Attempt to identify heavy and light antibody chains from their descriptions')
args = parser.parse_args()

mapping = None
if args.map:
    mapping = {}
    for pair in args.map:
        mapping[pair[0]] = pair[2]

source_chains = None
if args.source:
    source_pdb = PDBFile(args.source)
    source_chains = source_pdb.chains()

files = args.files
if len(files) == 0:
    files = [sys.stdin]

for target in files:
    target = PDBFile(target)

    target_chains = []
    molecule_descriptions = []
    molecule_chains = []
    for line in target.lines():
        if line[0:6] == 'ATOM  ':
            chain = line[21]
            if chain not in target_chains:
                target_chains.append(chain)
        if line[0:6] == 'COMPND':
            if line[11:20] == 'MOLECULE:':
                molecule_descriptions.append(line[21:])
            if line[11:17] == 'CHAIN:':
                molecule_chains.append(re.split('\s*,\s*', re.sub('\s*;?\s*\n$', '', line[18:])))
    if mapping is None:
        mapping = dict(zip(target_chains, target_chains))

    if args.align:
        from subprocess import Popen, PIPE

        for alignment in args.align:
            chain = alignment[0]
            child = Popen('blastp -query ' + alignment[2:] + ' -subject - -outfmt "6 sseqid pident"', stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True, text=True)

            for target_chain in target:
                child.stdin.write('>' + target_chain.name)
                child.stdin.write(target_chain.sequence_seqres())
            child.stdin.close()
            for line in child.stdout.readlines():
                identity = float(line[7:])
                if identity >= args.identity_threshold:
                    mapping[line[5]] = chain

    if args.use_anarci:
        from anarci import run_anarci
        for chain in target:
            _, numbered, details, _ = run_anarci([(chain.name, chain.sequence())], scheme='chothia', allow=set(['H', 'L']))
            numbered = numbered[0]
            details = details[0]
            if numbered is None:
                continue
            if len(numbered) > 1:
                warn('{}: more than one H or L fragment was found in chain {}, using the first'.format('', chain.name))
            mapping[chain.name] = details[0]['chain_type']

    if args.guess:
        for description, chains in zip(molecule_descriptions, molecule_chains):
            if re.search('heavy chain', description, re.IGNORECASE):
                for chain in chains:
                    mapping[chain] = 'H'
            if re.search('light chain', description, re.IGNORECASE):
                for chain in chains:
                    mapping[chain] = 'L'

    if source_chains is not None:
        if len(source_chains) != len(target_chains):
            raise Exception('Chain lists are different in size: ' + str(source_chains) + ' and ' + str(target_chains))
        else:
            mapping = dict(zip(target_chains, source_chains))

    for chain in target:
        if not chain.name in mapping:
            continue
        chain.rename(mapping[chain.name])

    print(target, end='')
